package persistdb

import (
	"encoding/json"
	"fmt"
	"sort"

	"github.com/golang-collections/go-datastructures/queue"
	"github.com/pkg/errors"
	"github.com/google/simhospital/pkg/state/persist"
)

// ItemSyncer implements the persist.ItemSyncer interface using a map.
// It tracks the LoadByID requests made to the syncer in the form of an
// internal `reqs` map for testing purposes.
type ItemSyncer struct {
	m    map[string]persist.MarshallableItem
	reqs map[string]int
	// delete indicates whether to delete items or not.
	delete   bool
	nDeletes int
}

// NewItemSyncer initializes the ItemSyncer.
func NewItemSyncer() *ItemSyncer {
	return &ItemSyncer{m: map[string]persist.MarshallableItem{}, reqs: map[string]int{}}
}

// NewItemSyncerWithDelete initializes the ItemSyncer with a value for whether to delete items or not.
func NewItemSyncerWithDelete(delete bool) *ItemSyncer {
	return &ItemSyncer{m: map[string]persist.MarshallableItem{}, reqs: map[string]int{}, delete: delete}
}

// Write writes an item to the map.
func (s *ItemSyncer) Write(item persist.MarshallableItem) error {
	id, err := item.ID()
	if err != nil {
		return errors.Wrap(err, "cannot get ID")
	}
	s.m[id] = item
	return nil
}

// Delete deletes an item from the map.
func (s *ItemSyncer) Delete(item persist.MarshallableItem) error {
	if !s.delete {
		return nil
	}
	s.nDeletes++
	id, err := item.ID()
	if err != nil {
		return errors.Wrap(err, "cannot get ID")
	}
	delete(s.m, id)
	return nil
}

// LoadAll returns a slice of all the items in the map, sorted by id.
func (s *ItemSyncer) LoadAll() ([]persist.MarshallableItem, error) {
	keys := make([]string, 0)
	for id := range s.m {
		keys = append(keys, id)
	}
	sort.Strings(keys)

	sorted := make([]persist.MarshallableItem, len(keys))
	for i, k := range keys {
		sorted[i] = s.m[k]
	}
	return sorted, nil
}

// LoadByID returns an item in the map with the provided id, if it exists.
func (s *ItemSyncer) LoadByID(id string) (persist.MarshallableItem, error) {
	s.reqs[id]++ // track LoadByID calls made to ItemSyncer for testing.
	return s.m[id], nil
}

// Count returns number of elements in the syncer for testing.
func (s *ItemSyncer) Count() int {
	return len(s.m)
}

// CountDeletes returns the number of deletions requested.
func (s *ItemSyncer) CountDeletes() int {
	return s.nDeletes
}

// WasRequested returns whether LoadByID was ever called with a specific id.
func (s *ItemSyncer) WasRequested(id string) bool {
	return s.reqs[id] > 0
}